// SPACING MIXIN

@mixin -spacer($name, $number, $props, $at-touch: null) {

  .#{$name}#{$number} {

    //Invert if negative
    $unit: if(str-slice($name, 1, 1) == "n", -1px, 1px);
    $spacing: $unit * $number;

    @each $prop in $props {
      #{$prop}: $spacing;
    }

    @if $number > 0 {
      @if $at-touch == "0" and abs($spacing) > 0 {
        @include bp(tablet) {
          @each $prop in $props {
            #{$prop}: 0;
          }
        }
      }

      @else if $at-touch == "G" and $spacing > $gutter {
        @include bp(tablet) {
          @each $prop in $props {
            #{$prop}: $gutter;
          }
        }
      }

      @else if $at-touch == "H" and $spacing > $gutter / 2 {
        @include bp(tablet) {
          @each $prop in $props {
            #{$prop}: $gutter / 2;
          }
        }
      }
    }
  }
}

// SPACING ITERATOR CONTROL MAP
// Defines a series of spacing helpers to be generated by the iterator.
// Names starting with "n" will be set as negative values.
// Negative values should not be set to "G" or "H"
//===FORMAT================================================
// 1. $name (unquoted string): The abbreviated class name
// 2. $at-touch ("0"|"G"|"H"): How the class breaks at touch width
//  - "0": Collapse to zero
//  - "G": Collapse to gutter
//  - "H": Collapse to half of gutter
// 3. $props (list(unquoted strings)): The properties to set with spacings
//  - Individual values count as single-element lists in Sass
//  - Multiple values must be wrapped in parentheses

$-spacing-helpers: (
  mt margin-top "G",
  mr margin-right "0",
  mb margin-bottom "G",
  ml margin-left "0",
  mv (margin-top margin-bottom) "G",
  nl margin-left "0",
  nr margin-right "0",
  pt padding-top "G",
  pr padding-right "0",
  pb padding-bottom "G",
  pl padding-left "0",
  pv (padding-top padding-bottom) "G",
  ps (padding-left padding-right) "H"
);

// SPACING ITERATOR

@for $i from 1 through 40 {

  @each $list in $-spacing-helpers {

    $name: nth($list, 1);
    $props: nth($list, 2);
    $at-touch: nth($list, 3);

    //individual values count as single-element lists
    $number: $i * 10;
    @include -spacer($name, $number, $props, $at-touch);
    $number: $number + 5;
    @include -spacer($name, $number, $props, $at-touch);
  }
}

// EXPLICITLY DEFINED SPACING HELPERS

.mb0 {
    margin-bottom: 0px !important;
}

.ps0-touch {
    @include bp(tablet) {
    padding-left: 0px !important;
    padding-right: 0px !important;
    }
}

.ps0-desktop {
    @include mw(desktop) {
    padding-left: 0px !important;
    padding-right: 0px !important;
    }
}

.ps0-mobile {
    @include bp(mobile) {
    padding-left: 0px !important;
    padding-right: 0px !important;
    }
}

//Negative helpers

.nmt50 {
    margin-top: -50px;
}

.nmt100 {
    margin-top: -100px;

    @include bp(tablet) {
    margin-top: 0;
    }
}

.nmt150 {
    margin-top: -150px !important;

    @include bp(tablet) {
    margin-top: 0;
    }
}